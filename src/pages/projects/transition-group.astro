---
import Layout from '../../layouts/layout.astro'
import ToastDemo from '../../components/toast-demo/index.jsx'
import FifteenDemo from '../../components/fifteen-demo/index.jsx'
import SlideDemo from '../../components/slide-demo/index.jsx'
import {Code}Â from 'astro:components'

---
<Layout>
  
  <h2>Transition Group Web Component</h2>
  


  <main>
    
    
    <div id="intro">
      <p>
      Animating appearance, disappearance and layout shifts of elements in a DOM can be tricky.
      That's why many frameworks offer utilities to handle it for you. I offer you this standards-based web-component to use with <em>any</em> framework (or none)!
      </p>    
    </div>
    
    <article id="toast-demo">
      <ToastDemo client:only />
    </article>
    
    <div id="toast-text">
      <p>
        In this simple demo there is a list of numbers, with new numbers added at the bottom every 2 seconds. The list is capped to four numbers by removing the top one when new numbers are pushed on the bottom.
      </p>
      <p>
        The code itself only manages the logic of updating and rendering the list. The animations are managed by the <code>&lt;transition-group&gt;</code> tag, by applying classes specfied in the <code>entry=</code>, <code>exit=</code> and <code>slide=</code> attributes. 
      </p>      
    </div>

    <div id="toast-code">
      <p class="code-label"><b><code>view-component.jsx</code></b></p>
      <Code lang="jsx" theme="material-theme-ocean" code={`
import "webcomponent-transition-group"

export default ({strings}) => (
  <ul class="toasts">
    <transition-group
      entry="slide"
      exit="pop"
      slide="slide"
    >
      {strings.map(str => (
        <li class="toast" key={str}>
          {str}
        </li>
      ))}
    </transition-group>
  </ul>
)
      `} />    
    </div>
    
    <div id="toast-css">
      <p class="code-label"><b><code>transition-styles.css</code></b></p>
      <Code lang="css" theme="material-theme-ocean" code={`   
.slide-pre {
  transform: translateY(200%);
  opacity: 0;
}

.pop {
  transform: scale(2, 2);
  opacity: 0;
}

.slide, .pop {
  transition: 0.4s;
}
      `} />
    </div>

    
    
    <article id="fifteen-text">
      <h3>Only specify the transitions you need</h3>
      <p>
         If you don't provide a transition-directive in
         the css for a specified transition-class, there
         will be errors.
      </p>
      <p>
        In this example, only the slide transition
        is needed, so that's all we provide. 
      </p>  
    </article>

  
    <div id="fifteen-demo">
      <FifteenDemo client:only />
    </div>
    
      
    
    <div id="fifteen-code">
      <p>
        <b><code>view-component.jsx</code></b>
      </p>
      <Code lang="jsx" theme="material-theme-ocean" code={`
import 'webcomponent-transition-group'

export default ({ordering, images, Move}) => (
  <transition-group slide="slide" class="board">
    {ordering.map(index => (
      <img
        src={images[index]}
        class={{
          blank: !index,
          square: !!index
        }}
        onclick={[Move, index]}
      />
    )}  
  </transition-group>
)

      `} />  
    </div>
    
    
    <div id="fifteen-style">
      <p>
        <b><code>transition-styles.jsx</code></b>
      </p>
      <Code lang="jsx" theme="material-theme-ocean" code={`
.slide { transition: 0.2s; }
.board {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr 1fr;
}
      `} />
    </div>  


    <article id="slide-text">
      <h3>Dynamic transitions</h3>
      <p>
        The transition classes to use are read at the moment
        each transition begins. That means you can change the
        classes to get different transitions.
      </p>
      <p>
        Like in this example, where the transitions can 
        go to the left or right depending on which control
        you click, and which slide is currently displayed
      </p> 
    </article>

    <div id="slide-demo">
      <SlideDemo client:only>
        <div id="slide0" slot="slide0" class="slide">
          <p>
            It is too late for me, son. The Emperor will show you the true nature of the Force
          </p>
        </div>
        <div id="slide1" slot="slide1" class="slide">
          <p>
             When nine hundred years old you reach, look as good you will not. Hmm? Soon will I rest
          </p>
        </div>
        <div id="slide2" slot="slide2" class="slide">
          <p>
            Did you hear that? They've shut down the main reactor. We'll be destroyed for sure.
          </p>
        </div>
        <div id="slide3" slot="slide3" class="slide">
          <p>
            The Force can have a strong influence on the weak-minded. You will find it a powerful ally
          </p>
        </div>
      </SlideDemo>  
    </div>
    
    <div id="slide-code">
      <Code lang="jsx" theme="material-theme-ocean" code={`
import 'webcomponent-transition-group';

export default ({slides, current, direction}) => (
  <div class="screen">
    <transition-group
      entry={"slide-entry-" + direction}
      exit={"slide-exit-" + direction}
    >
      <Slide key={"slide" + current}>
        {slides[current]}
      </Slide>
    </transition-group> 
  </div>
)
      `} />
    </div>
    
    <div id="slide-style">
      <Code lang="css" theme="material-theme-ocean" code={`
.slide-entry-left-pre,
.slide-exit-right {
  transform: translateX(-100%);
  opacity: 0;
}
.slide-exit-left,
.slide-entry-right-pre {
  transform: translateX(100%);
  opacity: 0;
}
.slide-entry-left,
.slide-exit-left,
.slide-entry-right,
.slide-exit-right {
  transition: 0.8s;
}
  
      `} />  
    </div>
    
    <article id="wrapup">
      <p>
        Like what you've seen? Feel like giving it a go yourself?  
        Bring the <code>&lt;transition-group&gt;</code> tag in to your project, either 
        with a script tag in your html:  
      </p>
      
      <p>
        <code>&lt;script type="module" src="https://unpkg.com/webcomponent-transition-group"&gt;&lt;/script&gt;</code>  
      </p>
      
      <p>
        ...or by <code>npm install webcomponent-transition-group</code> and then
        <code>import "webcomponent-transition-group"</code> in every component that uses
        the <code>&lt;transition-group&gt;</code> tag
      </p>
      
      <p>
        Check the code, report bugs and issues, at <a href="https://github.com/zaceno/webcomponent-transition-group">GitHub</a>.
      </p>
      
    </article>

  
  </main>
</Layout>

<style>

main {
    margin: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap:  1rem;
    position: relative;
}

main > * {
  --width: 100%;
  flex: 1 0 var(--width);
  max-width: var(--width);
  
}

#fifteen-text {margin-top: 2rem;}


.slide {
  display: flex;
  overflow: auto;
  border-radius: 2rem;
  width: 100%;
  height: 100%;
}

.slide p {
  font-family: 'Marck script', cursive;
  text-align: center;
  background: #00000055;
  color: #ffffff;
  font-size: 5vw;
  height: 5em;
  padding: 0.5em;
  margin: 1.5em;
}
    
#slide0 {
  background: linear-gradient(rgb(254, 0, 0), transparent),
  linear-gradient(to top left, rgb(0, 255, 0), transparent),
  linear-gradient(to top right, rgb(0, 58, 255), transparent);
  background-blend-mode: screen;
}
#slide1 {
  background: linear-gradient(-120deg, #000, #fff),
    linear-gradient(rgb(153, 14, 153), rgb(234, 164, 178));
  background-blend-mode: screen;
  background-size: 100% 100%, 100% 20%;
  background-position: 0 0, 0 4%;
}
#slide2 {
  background: repeating-radial-gradient(circle at bottom center, #409, #306 20%),
    radial-gradient(
      circle at 25% 50%,
      transparent,
      transparent 30%,
      #ffffff22 30%,
      #ffffff22 31%,
      transparent 31%,
      transparent
    );
  background-blend-mode: screen;
}
#slide3 {
  background: linear-gradient(rgb(206, 125, 0), rgb(0, 119, 0)),
    repeating-radial-gradient(circle at 70% 50%, #aaa, #777 5%),
    repeating-radial-gradient(circle at 30% 50%, #aaa, #777 5%);
  background-blend-mode: color, screen;
}


/* Small devices (portrait tablets and large phones, 600px and up)*/
@media only screen and (min-width: 600px) {
  #intro {
    flex: 0 0 100%;
  }

  #fifteen-demo {margin-top: 2rem;}

  #toast-demo, #fifteen-demo, #slide-text {
    --width: calc(40% - 0.5rem);
  }
  #toast-text, #fifteen-text, #slide-demo {
    --width: calc(60% - 0.5rem);
  }
   .slide p {
    font-size: 3vw;
  }
 
} 

/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {
  main, body>h2 {
    width: 90vw;
    max-width: 60rem;
    margin-left: auto;
    margin-right: auto;
  }
  #toast-code, #toast-css, #fifteen-code, #fifteen-style, #slide-code, #slide-style {
    --width: calc(50% - 0.5rem);
  }

} 
/* Large devices (laptops/desktops, 992px and up)  */
@media only screen and (min-width: 992px) {
  .slide p {
    font-size: 2rem;
  }
}
/* Extra large devices (large laptops and desktops, 1200px and up)*/
@media only screen and (min-width: 1200px) {
}  
    
</style>
