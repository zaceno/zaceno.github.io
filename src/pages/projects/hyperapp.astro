---
import Layout from '../../layouts/layout.astro'
import {Code} from 'astro:components'
import {Image} from 'astro:assets'
import astroLogo from '../../assets/astro-icon-light-gradient.svg'
import hyperappLogo from '../../assets/hyperapp-logo.svg'
import CounterDemo from '../../components/counter-demo/counter.jsx'
import ToggleSlotDemo from '../../components/toggle-slot-demo'
import IslandDemo1 from '../../components/synced-demo/island1.jsx'
import IslandDemo2 from '../../components/synced-demo/island2.jsx'
---
<Layout>
 

  
  <h2>Astro Hyperapp Integration</h2>
  <main>
 
    <p style="text-align: center">
      <Image src={hyperappLogo} style="height: 3rem; vertical-align: top;;" alt="Hyperapp Logo"/>  
        ❤️
      <Image src={astroLogo} style="height: 4rem; vertical-align: middle;" alt="Astro Logo" />
    </p>

    <p>
      Astro islands using hyperapp. Read on or check out 
      <a href="https://stackblitz.com/github/zaceno/astrojs-hyperapp-demo">the demo</a>. 
      To get started, install it and import in your <code>astro.config.mjs</code></p>


  <div class="code">
    <Code lang="sh" theme="material-theme-ocean" code={`
> npm install @zxlabs/astrojs-hyperapp    
    `}/>
  </div> 

  <div class="code">
    <Code lang="js" theme="material-theme-ocean" code={`// astro.config.mjs

import { defineConfig } from "astro/config"
import hyperapp from "@zxlabs/astrojs-hyperapp"

export default defineConfig({
  integrations: [hyperapp()],
})  
    `}/>
  </div>  
  
  <div class="columns">
    <div class="col1">
    <p>
      If you're using jsx for your components, and also use other
      frameworks that use jsx, you need to explicitly tell the integrations
      which files it should include or exclude using
      <a href="https://github.com/micromatch/picomatch#globbing-features">picomatch</a>
      patterns.
    </p>
  
    <p>
      This might require you to use some naming convention or folder structure
      to make it possible to separate components from different frameworks.
    </p>
    </div>

    <div class="code col2">
    <Code lang="js" theme="material-theme-ocean" code={`// astro.config.mjs

import { defineConfig } from "astro/config"
import hyperapp from "@zxlabs/astrojs-hyperapp"
import preact from "@astrojs/preact"

export default defineConfig({
  integrations: [
    hyperapp({ include: ["**/hyperapp/*"] }), //exclude option also possible
    preact({ include: ["**/preact/*"] }), //exclude option also possible
  ],
})
    `}/>
    </div>
</div>

    
    <h3>Authoring islands</h3>
  
  <div class="columns">
  
  <div>
    <p>In astrojs, an 'island' is a part of a page that is hooked up to a client-side framework
    for interactivity. Each of our islands will be activated (or "hydrated") with a call to
    Hyperapp's <code is:raw>app(...)</code> function.</p>
    
    <p>An island module needs to default-export a function that optionally takes some server-side
    props, and returns an object we could pass to Hyperapp's <code>app()</code> – except the <code>node</code> prop,
    which will be provided by this integration.</p>
    <h3>Using islands on a page</h3>
    
    <p>With a island thus defined, the we can use hyperapp
    to render the component (both server side and hydrate
    client side), in our astro-components like this:</p>
    <p>Note how the props passed in to the island in the astro-component,
    are available in the <code>serverProps</code> we defined in the counter.</p>

  </div>

  <div class="code">
    <Code lang="jsx" theme="material-theme-ocean" code={`// components/counter.jsx

const incr = x => x + 1
const decr = x => x - 1

export default const serverProps => ({

  init: serverProps.startCount || 0,

  view: value => (
    <div class="counter">
      <h1>{value}</h1>
      <button onclick={decr}> - </button>
      <button onclick={incr}> + </button>
    </div>
  ),

  // could also define these props:
  // subscriptions: ...
  // dispatch: ...
})
    `} />

</div>
  </div>
  
  <div class="columns">
    <div class="code">
    <Code lang="jsx" theme="material-theme-ocean" code={`
  ---
  // pages/index.astro

  import Counter from '../components/counter.jsx'
  ---
  <!doctype html>
  <html>
    <head></head>
    <body>
      <p> Here is the counter, starting at 5</p>
  
      <Counter client:load startCount={5} />
  
    </body>
  </html>    
    `} />
    </div>
 
  <article>   
    <p> Here is the counter, starting at 5</p>
    <CounterDemo client:load startValue={5} />
  </article>
</div>  
  

  
  
    <h3>Passing static content to islands</h3>
    <p>You can pass static content from astro components in to your islands,
    for example to control hiding/showing the content.</p>
    
    <div class="columns">
  <div class="code">  
  <Code lang="jsx" theme="material-theme-ocean" code={`
---

import ContentToggle from '../components/ContentToggle.jsx'

---
<p> Click to reveal contents:</p>
<ContentToggle client:load>
  <p style="color: #ffaa33">
    This orange text is hidden by default.
  </p>  
</ContentToggle>

  `} />  
  </div>
  
  
  <article>
    <p> Click to reveal contents:</p>
    <ToggleSlotDemo client:load>
      <p style="color: #ffaa33">
        This orange text is hidden by default.
      </p>  
    </ToggleSlotDemo>
  </article>
</div>

  <p>This is the default behavior for all content not specifically slotted. You can also
  set a html node to appear in a specific slot with the <code>slot</code> attribute.</p>

<div class="columns">
  <div class="code">  
  <Code lang="jsx" theme="material-theme-ocean" code={`
---

import ContentToggle from '../components/ContentToggle.jsx'

---
<ContentToggle client:load>
  <p style="color: #33ffff">
    This turquoise text is hidden by default.
  </p>  
  <p slot="footer">
    This text is always visible  
  </p>
</ContentToggle>

  `} />  
  </div>
  
  <article>
    <p> Click to reveal contents:</p>
    <ToggleSlotDemo client:load>
      <p style="color: #33ffff">
        This turquoise text is hidden by default.
      </p>  
      <p slot="footer">
        This text is always visible  
      </p>
    </ToggleSlotDemo>
  </article>
</div>

<div class="columns">
<div>
  <p>Content for the default slot is passed to the island as a second argument. Named slots are passed to the component as properties: </p>


    
    <p>Slot-names need to be given as snake/kebab case (e.g <code>slot="kebab-case"</code> or <code>slot="snake_case"</code>)
    in <code>.astro</code> files (in order to be html-compliant). But for your convenience, such names are transformed to
    camelCase (e.g. <code>props.kebabCase</code> or <code>props.snakeCase</code>) in the props passed to the island.
   </p> 
</div>

  <div class="code">
  <Code lang="jsx" theme="material-theme-ocean" code={`
// components/ContentToggle.jsx

const toggle = showing => !showing

export default (props, content) => ({

   init: false,

   view: showing => (
     <div style={{ outline: "1px #ffffff33 solid" }}>
       <button onclick={toggle}>
         {showing ? "Hide" : "Show"}
       </button>
       {showing && content}
       {props.footer}
     </div>
   ),

 })`} />  
  </div>  
  
  </div>
    <h3>Sharing state between islands</h3>
    
    <p>Since each island will be it's own instance of a hyperapp-app they will not share state.
    Astro recommends using <a href="https://github.com/nanostores">nanostores</a> for sharing states, and that
    is a perfectly good option. You will just have to write your own effects/subscriptions.</p>
    
    <p>
      Another option is to use state synchronization utility shipped with this integration. With this,
      you define a headless "master-app" by providing an <code>init</code> prop and optionally
      <code>subscriptions</code> and <code>dispatch</code> (for middleware).
    </p>

    <div class="code">
  <Code lang="js" theme="material-theme-ocean" code={`
// components/master.js

import syncedIslands from "@zxlabs/astrojs-hyperapp/synced-islands"
  
export default syncedIslands({
  init: { name: "Person McNameson", fruit: "apples" },
  //subscriptions: ...
  //dispatch: ...
})  
  `} />
  </div>

  <p>It will return
  a function which islands can use to provide just their views in a convenient way. Although they will be rendered as separate islands (and technically individual app-instances), they will share the same state, and rerender whenever it is updated.</p>

  <div class="code">
  <Code lang="jsx" theme="material-theme-ocean" code={`
// components/island1.js

import master from "./master.js"
  
const setFruit = (state, ev) => ({
  ...state,
  fruit: ev.target.value,
})

export default () =>
  master(state => (
    <div class="synced-demo">
      <p>
        Hello <span class="data">{state.name}</span>!
        What's your favorite fruit? &nbsp;
        <select onchange={setFruit}>
          <option selected={state.fruit === "apples"}>apples</option>
          <option selected={state.fruit === "oranges"}>oranges</option>
          <option selected={state.fruit === "bananas"}>bananas</option>
        </select>
      </p>
    </div>
  ))
  `} />
  </div> 
  
     
    <article>
      <IslandDemo1 client:load />
    </article>
  
  <div class="code">  
    <Code lang="jsx" theme="material-theme-ocean" code={`
// components/island2.js

import master from "./master.js"
    
const setName = (state, ev) => ({
  ...state,
  name: ev.target.value,
})

export default () =>
  master(state => (
    <div class="synced-demo">
      <p>
        I hear you like <span class="data">{state.fruit}</span>!
        What's your name? &nbsp;
        <input type="text" value={state.name} oninput={setName} />
      </p>
    </div>
  ))    
    `} />
    </div>
    <article>
      <IslandDemo2 client:load />
    </article>
    
    </main>
</Layout>
<style>


main {
    margin: 1rem;
    position: relative;
}

article, div.code, p, h3 {
  margin: 2rem 0;
}



div.code {
  position: relative;
  overflow: hidden;
}

/* Small devices (portrait tablets and large phones, 600px and up)*/
@media only screen and (min-width: 600px) {
} 


/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {
  main, body>h2 {
    width: 90vw;
    max-width: 60rem;
    margin-left: auto;
    margin-right: auto;
  }
.columns {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    
  }
  
  .columns > * {
    flex: 1 0 calc(50% - 0.5rem);
  } 
  
} 


/* Large devices (laptops/desktops, 992px and up)  */
@media only screen and (min-width: 992px) {
}
/* Extra large devices (large laptops and desktops, 1200px and up)*/
@media only screen and (min-width: 1200px) {
}  

</style>